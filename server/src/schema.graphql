scalar Date
scalar JSON

type Query {
  getUsers: [User]
  getUser(id: String): User
  getTeam: Team
  getGroups: [Group]
  getGroup: Group
  getFolders(parent: String): [Folder]
  getFolder(id: String!): Folder
}

type Mutation {
  captureEmail(email: String!): User
  invite(emails: [String], groups: [String], role: String): [User]
  createFolder(parent: String, name: String!): Folder
  createGroup(name: String, initials: String, avatarColor: String, users: [String]): Group
  addUsersToGroup(id: String!, users: [String]): Group
  updateUser(id: String! input: UserInput): User
  deleteUser(id: String!): Boolean
  updateFolder(id: String!, input: FolderInput): Folder
  deleteFolder(id: String!): Boolean
  signup(
    id: String!,
    firstname: String!,
    lastname: String!,
    password: String!
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
}


input FolderInput {
  name: String
  parent: String
  description: String
  shareWith: [ShareInput]
}

input ShareInput {
  kind: String
  item: String
}

input UserInput {
  name: String
  firstname: String
  lastname: String
  email: String
  avatarColor: String
  jobTitle: String
  team: String
  role: String
  status: String
}

type User {
  id: String
  name: String
  firstname: String
  lastname: String
  email: String
  avatarColor: String
  jobTitle: String
  team: String
  role: String
  status: String
  createdAt: Date
}

type Folder {
  id: String
  name: String
  parent: String
  description: String
  shareWith: [JSON]
}

type Team {
  id: String
  name: String
}

type Group {
  id: String
  team: String
  name: String
  initials: String
  avatarColor: String
  users: [String]
}

type AuthPayload {
  token: String!
  user: User!
}
